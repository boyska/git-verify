#!/usr/bin/env bash

# This script will return the latest commit in this branch history that is signed&trusted

latest_tag() {
    #latest signed tag from current branch
    to=$1
    while true; do
        tag=$(git describe --abbrev=0 $1)
        if [ "$?" -eq 128 ]; then # no such tag
            return 1
        fi

        if git tag -v "$tag" &> /dev/null; then
            echo $tag
            return 0
        else
            to="${tag}^"
        fi
    done
}

get_latest_verified() {
    to=$1
    known_good=$2
    local latest_good
    shift 2
    # G? means "check signature"; only "G" (good) are ok for us
    # we are traversing the log in reverse order (through tac)
    # and will stop at the first non-good commit
    git log --pretty="%G? %H %GS" "$known_good..$to" | tac | \
        while read line; do
            if egrep -q '^G ' <<<"$line"; then
                latest_good="$(awk '{ print $2 }' <<<"$line")"
                debug "Good: $latest_good"
            else
                echo "BAD: $line"
                return 1
            fi
        done
    return 0
}

usage() {
    echo "$0 [options] [REF]"
    echo "  Verifies if all commit preceding REF are signed and trusted"
    echo "Options:"
    echo "    -k KNOWN_GOOD    Assumes that KNOWN_GOOD is verified, and starts from it"
    echo "    -h               Shows this help"
}

debug() {
    if [ $verbose -gt 0 ]; then
        echo "[D] $1"
    fi
}

verbose=0
known_good=
while getopts 'hvk:' opt ; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        k)
            known_good=$OPTARG
            ;;
        v)
            verbose=1
            ;;
        \?)
            echo "Invalid options: -$OPTARG" >&2
            exit 2
            ;;
        esac
done
shift $((OPTIND-1))

if [ -z "$known_good" ]; then
    known_good=$(latest_tag $to)
    debug "knowngood discovered: $known_good"
fi
get_latest_verified ${1:-HEAD} $known_good
